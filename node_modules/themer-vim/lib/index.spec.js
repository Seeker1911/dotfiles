'use strict';

var _index = require('./index');

var _themerColorsDefault = require('themer-colors-default');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('themer vim color scheme generator', () => {

  const testColorSetConfiguration = (message, colors) => {
    it(message, _asyncToGenerator(function* () {
      const files = yield Promise.all((0, _index.render)(colors, {}));
      const fileContents = files[0].contents.toString('utf8');
      expect(files.length).toBe(1);
      expect(/undefined/.test(fileContents)).toBe(false);
      expect(/'dark'/.test(fileContents)).toBe('dark' in colors);
      expect(/'light'/.test(fileContents)).toBe('light' in colors);
    }));
  };

  testColorSetConfiguration('should produce only one file containing both schemes if passed both a dark and light theme', _themerColorsDefault.colors);
  testColorSetConfiguration('should produce only one file containing only a dark scheme if passed only a dark color set', { dark: _themerColorsDefault.colors.dark });
  testColorSetConfiguration('should produce only one file containing only a light scheme if passed only a light color set', { light: _themerColorsDefault.colors.light });
});