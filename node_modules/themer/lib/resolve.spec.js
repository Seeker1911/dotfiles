'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolve = require('./resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _wrap = require('./test-helpers/wrap');

var _wrap2 = _interopRequireDefault(_wrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('the package resolver', () => {

  const helperDir = _path2.default.resolve('lib', 'test-helpers');

  it('should resolve local files', _asyncToGenerator(function* () {
    const helperColors = _path2.default.resolve(helperDir, 'colors.js');
    const wrapped = yield (0, _wrap2.default)(function () {
      return (0, _resolve2.default)(helperColors);
    });
    expect(wrapped).not.toThrow();
  }));

  it('should resolve npm packages', _asyncToGenerator(function* () {
    const wrapped = yield (0, _wrap2.default)(function () {
      return (0, _resolve2.default)('minimist');
    });
    expect(wrapped).not.toThrow();
  }));

  it('should fail to resolve nonexistant paths', _asyncToGenerator(function* () {
    const wrapped = yield (0, _wrap2.default)(function () {
      return (0, _resolve2.default)(_path2.default.resolve('foo', 'bar', 'baz.js'));
    });
    expect(wrapped).toThrow();
  }));

  it('should fail to resolve uninstalled packages', _asyncToGenerator(function* () {
    const wrapped = yield (0, _wrap2.default)(function () {
      return (0, _resolve2.default)('themer-hyper');
    });
    expect(wrapped).toThrow();
  }));
});