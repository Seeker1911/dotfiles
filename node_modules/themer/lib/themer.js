'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = themer;

var _fs = require('pn/fs');

var _fs2 = _interopRequireDefault(_fs);

var _mkdirpPromise = require('mkdirp-promise');

var _mkdirpPromise2 = _interopRequireDefault(_mkdirpPromise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Rx = require('rxjs/Rx');

var _Rx2 = _interopRequireDefault(_Rx);

var _resolve = require('./resolve');

var _resolve2 = _interopRequireDefault(_resolve);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const flatten = arr => [].concat.apply([], arr);

function themer(colorsPackageName, templatePackageNames, outDirName, extraArgs) {
  return _Rx2.default.Observable.create(observer => {
    observer.next('resolving packages...');
    Promise.all([colorsPackageName, ...templatePackageNames].map(_resolve2.default)).then(requireables => {
      const colors = require(requireables[0]).colors;
      const templates = requireables.slice(1).map(require);
      const templateNames = templatePackageNames.map(templatePath => _path2.default.basename(templatePath));
      observer.next('rendering templates...');
      return Promise.all(flatten(templates.map((template, i) => template.render(colors, extraArgs).map(promisedFile => promisedFile.then(file => ({ file: file, dir: templateNames[i] }))))));
    }).then(outputs => {
      observer.next('writing files...');
      return Promise.all(outputs.map(output => {
        const outputFilePath = _path2.default.resolve(outDirName, output.dir, output.file.name);
        return (0, _mkdirpPromise2.default)(_path2.default.dirname(outputFilePath)).then(() => _fs2.default.writeFile(outputFilePath, output.file.contents));
      }));
    }).then(() => {
      observer.next('done!');
      observer.complete();
    }).catch(e => {
      observer.error(e);
    });
  });
}