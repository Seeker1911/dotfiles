'use strict';

var _index = require('./index');

var _themerColorsDefault = require('themer-colors-default');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('themer "block wave" wallpaper', () => {

  const test = (scenario, colors, totalDefaultFiles) => {

    describe(scenario, () => {

      describe('and when rendering only default resolutions', () => {
        const promises = (0, _index.render)(colors, {});

        it(`should return ${totalDefaultFiles} files to write`, _asyncToGenerator(function* () {
          const files = yield Promise.all(promises);
          expect(files.length).toBe(totalDefaultFiles);
          expect(files.filter(function (file) {
            return (/\.svg/.test(file.name)
            );
          }).length).toBe(totalDefaultFiles);
        }));

        it('should not contain "undefined" in the SVG output', _asyncToGenerator(function* () {
          const files = yield Promise.all(promises);
          files.filter(function (file) {
            return (/\.svg/.test(file.name)
            );
          }).forEach(function (file) {
            expect(file.contents.toString('utf8')).not.toContain('undefined');
          });
        }));
      });

      describe('and when rendering a custom resolution', () => {
        const promises = (0, _index.render)(colors, { 'themer-wallpaper-block-wave-size': '600x600' });

        it(`should return ${totalDefaultFiles / 2} files to write`, _asyncToGenerator(function* () {
          const files = yield Promise.all(promises);
          expect(files.length).toBe(totalDefaultFiles / 2);
          expect(files.filter(function (file) {
            return (/\.svg/.test(file.name)
            );
          }).length).toBe(totalDefaultFiles / 2);
        }));

        it('should not contain "undefined" in the SVG output', _asyncToGenerator(function* () {
          const files = yield Promise.all(promises);
          files.filter(function (file) {
            return (/\.svg/.test(file.name)
            );
          }).forEach(function (file) {
            expect(file.contents.toString('utf8')).not.toContain('undefined');
          });
        }));
      });
    });
  };

  test('when given both a light and a dark theme', _themerColorsDefault.colors, 4);
  test('when given only a dark theme', { dark: _themerColorsDefault.colors.dark }, 2);
  test('when given only a light theme', { light: _themerColorsDefault.colors.light }, 2);
});