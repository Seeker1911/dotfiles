'use strict';

var _child_process = require('pn/child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _fs = require('pn/fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _wrap = require('./test-helpers/wrap');

var _wrap2 = _interopRequireDefault(_wrap);

var _template = require('./test-helpers/template');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('the themer command line interface', () => {

  const pathToExecutable = _path2.default.resolve('bin', 'themer.js');

  it('should fail if no arguments are provided', _asyncToGenerator(function* () {
    const wrapped = yield (0, _wrap2.default)(function () {
      return _child_process2.default.execFile(pathToExecutable).promise;
    });
    expect(wrapped).toThrow();
  }));

  it('should fail if given unresolvable arguments', _asyncToGenerator(function* () {
    const args = ['-c', 'fake', '-t', 'fake', '-o', 'fake'];
    const wrapped = yield (0, _wrap2.default)(function () {
      return _child_process2.default.execFile(pathToExecutable, args).promise;
    });
    expect(wrapped).toThrow();
  }));

  describe('when given valid arguments', () => {

    const testOutputDir = _path2.default.resolve('test-output');
    const templateName = 'template.js';
    const testOutputFile = _path2.default.resolve(testOutputDir, templateName, _template.outputFileDirectory, _template.outputFileName);
    const args = ['-c', _path2.default.resolve('lib', 'test-helpers', 'colors.js'), '-t', _path2.default.resolve('lib', 'test-helpers', templateName), '-o', testOutputDir];

    afterEach(() => _child_process2.default.exec(`rm -rf ${testOutputDir}`).promise);

    it('should complete without error', _asyncToGenerator(function* () {
      const wrapped = yield (0, _wrap2.default)(function () {
        return _child_process2.default.execFile(pathToExecutable, args).promise;
      });
      expect(wrapped).not.toThrow();
    }));

    it('should create the specified output directory if necessary', _asyncToGenerator(function* () {
      yield _child_process2.default.execFile(pathToExecutable, args).promise;
      const wrapped = yield (0, _wrap2.default)(function () {
        return _fs2.default.access(testOutputDir);
      });
      expect(wrapped).not.toThrow();
    }));

    it('should create a directory for each template, named after the template', _asyncToGenerator(function* () {
      yield _child_process2.default.execFile(pathToExecutable, args).promise;
      const wrapped = yield (0, _wrap2.default)(function () {
        return _fs2.default.access(_path2.default.resolve(testOutputDir, templateName));
      });
      expect(wrapped).not.toThrow();
    }));

    it('should render any subdirectories that the templates might specify', _asyncToGenerator(function* () {
      yield _child_process2.default.execFile(pathToExecutable, args).promise;
      const wrapped = yield (0, _wrap2.default)(function () {
        return _fs2.default.access(_path2.default.resolve(testOutputDir, templateName, _template.outputFileDirectory));
      });
      expect(wrapped).not.toThrow();
    }));

    it('should render output files into the specified directory', _asyncToGenerator(function* () {
      yield _child_process2.default.execFile(pathToExecutable, args).promise;
      const wrapped = yield (0, _wrap2.default)(function () {
        return _fs2.default.access(testOutputFile);
      });
      expect(wrapped).not.toThrow();
    }));

    it('should render output files properly', _asyncToGenerator(function* () {
      yield _child_process2.default.execFile(pathToExecutable, args).promise;
      const contents = yield _fs2.default.readFile(testOutputFile, 'utf8');
      expect(contents).toEqual(_template.outputFileContents);
    }));
  });
});